// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  name          String?
  avatar        String?
  status        Boolean       @default(true)
  roles         Role[]        @relation("UserRoles")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  lastLoginAt   DateTime?     @map("last_login_at")
  loginCount    Int          @default(0) @map("login_count")
  refreshTokens RefreshToken[]
  auditLogs     AuditLog[]
  metadata      Json?        // 存储用户额外的元数据
  isVerified    Boolean      @default(false) @map("is_verified")
  verifiedAt    DateTime?    @map("verified_at")
  phoneNumber   String?      @map("phone_number")
  twoFactorEnabled Boolean   @default(false) @map("two_factor_enabled")
  twoFactorSecret String?    @map("two_factor_secret")

  @@map("users")
}

// 角色模型
model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  users       User[]       @relation("UserRoles")
  permissions Permission[] @relation("RolePermissions")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  isSystem    Boolean      @default(false) @map("is_system")
  priority    Int          @default(0)
  parentRole  Role?        @relation("RoleHierarchy", fields: [parentId], references: [id])
  parentId    Int?         @map("parent_id")
  childRoles  Role[]       @relation("RoleHierarchy")
  auditLogs   AuditLog[]

  @@map("roles")
}

// 权限模型
model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  roles       Role[]   @relation("RolePermissions")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  type        String   // API, MENU, OPERATION 等
  resource    String   // 资源标识
  action      String   // CREATE, READ, UPDATE, DELETE 等
  conditions  Json?    // 权限条件（如数据过滤规则）
  isSystem    Boolean  @default(false) @map("is_system")
  auditLogs   AuditLog[]

  @@map("permissions")
  @@index([type, resource, action])
}

// 刷新令牌模型
model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  deviceInfo Json?   @map("device_info")

  @@map("refresh_tokens")
  @@index([userId, expiresAt])
}

// 审计日志模型
model AuditLog {
  id           Int         @id @default(autoincrement())
  userId       Int?        @map("user_id")
  user         User?       @relation(fields: [userId], references: [id])
  roleId       Int?        @map("role_id")
  role         Role?       @relation(fields: [roleId], references: [id])
  permissionId Int?        @map("permission_id")
  permission   Permission? @relation(fields: [permissionId], references: [id])
  action       String      // 操作类型
  resource     String      // 资源类型
  details      Json?       // 详细信息
  ipAddress    String?     @map("ip_address")
  userAgent    String?     @map("user_agent")
  createdAt    DateTime    @default(now()) @map("created_at")
  status       String      // SUCCESS, FAILURE
  errorMessage String?     @map("error_message")

  @@map("audit_logs")
  @@index([userId, createdAt])
  @@index([action, resource])
}

// 系统配置模型
model SystemConfig {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("system_configs")
}

// API访问记录模型
model ApiAccessLog {
  id           Int      @id @default(autoincrement())
  path         String
  method       String
  statusCode   Int      @map("status_code")
  responseTime Int      @map("response_time") // 毫秒
  userId       Int?     @map("user_id")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  requestBody  Json?    @map("request_body")
  responseBody Json?    @map("response_body")
  headers      Json?

  @@map("api_access_logs")
  @@index([path, method])
  @@index([userId, createdAt])
}

// 菜单模型
model Menu {
  id        Int      @id @default(autoincrement())
  name      String
  path      String?
  icon      String?
  parentId  Int?     @map("parent_id")
  parent    Menu?    @relation("MenuHierarchy", fields: [parentId], references: [id])
  children  Menu[]   @relation("MenuHierarchy")
  order     Int      @default(0)
  isVisible Boolean  @default(true) @map("is_visible")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("menus")
}