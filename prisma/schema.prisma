// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id              String         @id @default(cuid())
  username        String         @unique
  email           String         @unique
  password        String
  name            String?
  avatar          String?
  status          Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  lastLoginAt     DateTime?
  loginCount      Int           @default(0)
  roles           UserRole[]     // 用户角色关联
  sessions        Session[]      // 会话关联
  accounts        Account[]      // OAuth账号关联
  auditLogs       AuditLog[]    // 审计日志关联

  @@index([email])
  @@index([username])
  @@index([createdAt])
}

// 角色模型
model Role {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  isSystem    Boolean       @default(false)
  priority    Int          @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       UserRole[]    // 角色用户关联
  permissions RolePermission[] // 角色权限关联

  @@index([name])
  @@index([priority])
}

// 权限模型
model Permission {
  id          String        @id @default(cuid())
  name        String        @unique
  code        String        @unique // 权限编码，如 'user:create'
  description String?
  type        String        // API, MENU, BUTTON 等
  resource    String        // 资源类型
  action      String        // 操作类型：CREATE, READ, UPDATE, DELETE
  isSystem    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  roles       RolePermission[] // 权限角色关联

  @@index([code])
  @@index([type, resource, action])
}

// 用户-角色关联表
model UserRole {
  id        String    @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

// 角色-权限关联表
model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

// 会话模型
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// OAuth账号模型
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// 审计日志模型
model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  resource  String
  details   String?  @db.Text
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action, resource])
  @@index([createdAt])
}

// 系统配置模型
model SystemConfig {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("system_configs")
}

// API访问记录模型
model ApiAccessLog {
  id           Int      @id @default(autoincrement())
  path         String
  method       String
  statusCode   Int      @map("status_code")
  responseTime Int      @map("response_time") // 毫秒
  userId       Int?     @map("user_id")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  requestBody  Json?    @map("request_body")
  responseBody Json?    @map("response_body")
  headers      Json?

  @@map("api_access_logs")
  @@index([path, method])
  @@index([userId, createdAt])
}

// 菜单模型
model Menu {
  id        Int      @id @default(autoincrement())
  name      String
  path      String?
  icon      String?
  parentId  Int?     @map("parent_id")
  parent    Menu?    @relation("MenuHierarchy", fields: [parentId], references: [id])
  children  Menu[]   @relation("MenuHierarchy")
  order     Int      @default(0)
  isVisible Boolean  @default(true) @map("is_visible")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("menus")
}