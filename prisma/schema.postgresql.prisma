// This is your Prisma schema file for PostgreSQL
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String    @unique
  password  String
  isActive  Boolean   @default(true)
  userRoles UserRole[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Role {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  userRoles   UserRole[]
  rolePerms   RolePermission[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("roles")
}

model Permission {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  resource    String
  action      String
  rolePerms   RolePermission[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("permissions")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([roleId, permissionId])
  @@map("role_permissions")
} 