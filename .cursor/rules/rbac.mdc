---
description: 
globs: 
---
---
description: RBAC项目开发规范和指导文档
globs: ["**/*"]
---

# RBAC项目开发规范

## 1. 模块化规范

### 1.1 前端代码规范
- 统一使用 ES Modules
```typescript
// ✅ 正确示例
import React from 'react';
export const Component = () => {};

// ❌ 错误示例
const React = require('react');
module.exports = Component;
```

### 1.2 后端代码规范
- 统一使用 CommonJS
```javascript
// ✅ 正确示例
const express = require('express');
module.exports = router;

// ❌ 错误示例
import express from 'express';
export default router;
```

## 2. 项目架构特点
- 本项目是前后端统一项目（非前后端分离）
- 前后端代码需要紧密集成
- 共享配置和类型定义
- 统一的路由管理
- 统一的环境变量管理

## 3. 包管理工具规范
- 强制使用 pnpm
```bash
# ✅ 正确的命令
pnpm install
pnpm add package-name
pnpm run dev

# ❌ 禁止使用
npm install
yarn add package-name
```

## 4. 数据库开发规范
- 需同时兼容 MySQL 和 PostgreSQL
- 使用Prisma的通用数据类型
- 避免使用特定数据库的专有特性
```typescript
// ✅ 正确示例 - 使用Prisma通用API
await prisma.user.findMany({
  where: {
    email: {
      contains: searchTerm
    }
  }
});

// ❌ 错误示例 - 使用特定数据库语法
await prisma.$queryRaw`SELECT * FROM users WHERE email LIKE ${searchTerm}`;
```

## 5. 环境适配规范
### 5.1 环境说明
- 开发环境：Windows
- 部署环境：Linux

### 5.2 跨平台开发注意事项
- 路径处理必须使用跨平台兼容写法
```typescript
// ✅ 正确示例 - 使用path模块处理路径
const path = require('path');
const filePath = path.join(__dirname, 'files', 'example.txt');

// ❌ 错误示例 - 硬编码路径分隔符
const filePath = __dirname + '\\files\\example.txt';
```

## 6. 环境变量配置
### 6.1 开发环境配置
- 默认数据库连接字符串：
```
mysql://rbac:CGJDF37DYjGPJyDc@43.159.53.148:3306/rbac
```

### 6.2 端口配置规范
- 所有端口配置必须通过环境变量管理
- 前端开发服务器端口：`VITE_PORT`（默认5173）
- 后端服务器端口：`PORT`（默认3000）
- CORS配置必须与前端端口匹配：`CORS_ORIGIN`

### 6.3 环境变量使用规范
```typescript
// ✅ 正确示例 - 使用配置模块
import { config } from '../config';
const port = config.port;

// ❌ 错误示例 - 直接使用process.env
const port = process.env.PORT;
```

### 6.4 配置验证规范
- 使用zod进行环境变量验证
- 为所有必需的环境变量提供合理的默认值
- 在应用启动时验证所有必需的环境变量
```typescript
// ✅ 正确示例
const envSchema = z.object({
  PORT: z.string().transform(Number).default('3000'),
});

// ❌ 错误示例
const port = process.env.PORT || 3000;
```

### 6.5 配置最佳实践
```typescript
// ✅ 正确示例
const config = {
  port: env.PORT,
  vitePort: env.VITE_PORT,
  cors: {
    origin: env.CORS_ORIGIN,
  },
};

// ❌ 错误示例
const port = 3000;
const corsOrigin = 'http://localhost:5173';
```

## 7. 代码提交规范
提交前必须确保：
1. 通过 TypeScript 类型检查
2. 通过 ESLint 代码规范检查
3. 确认跨平台兼容性
4. 完成数据库兼容性测试
5. 确保所有配置通过环境变量管理

## 8. 开发流程指南
1. 开发前确认环境配置正确
2. 充分利用 TypeScript 类型系统
3. 严格遵循项目目录结构
4. 保持代码风格一致性
5. 编写跨平台兼容代码
6. 测试 MySQL 和 PostgreSQL 兼容性

## 9. 安全规范
1. 禁止在代码中包含敏感信息
2. 使用环境变量管理配置信息
3. 注意 Windows 和 Linux 的文件权限差异
4. 所有数据库查询必须使用参数化防止注入

## 10. 错误处理规范
1. 统一使用全局错误处理中间件
2. 规范化错误响应格式
3. 合理使用日志记录错误信息
4. 区分开发环境和生产环境的错误展示

## 11. 性能优化准则
1. 合理使用数据库索引
2. 实现必要的缓存机制
3. 优化前端资源加载
4. 控制API响应数据大小

注意：本规范文档会随项目发展持续更新，请定期查看最新版本。